'use strict';

var fs = require('fs');

/**
 * @param {Object} jshint
 * @param {{reporter: Function}} reporter
 */
function Linter(jshint, reporter) {
    this._jshint = jshint;
    this._reporter = reporter;
    this._verboseMode = false;
}

/**
 * Enables jshint verbose mode.
 */
Linter.prototype.enableVerboseMode = function () {
    this._verboseMode = true;
};

/**
 * Runs validation for groups.
 *
 * @param {GroupSpec[]} groups
 * @param {Function} [fn]
 * @returns {boolean} True on success.
 */
Linter.prototype.run = function (groups, fn) {
    var failures = 0;
    groups.forEach(function (group) {
        var files = group.files;
        if (!files.length) {
            return;
        }

        if (fn) {
            fn(group.name);
        }

        if (!this._lint(files, group.options)) {
            failures++;
        }
    }, this);

    return !failures;
};

/**
 * Lints files using jshint.
 *
 * @param {string[]} files
 * @param {Object} [options] jshint options
 * @returns {boolean} True on success.
 */
Linter.prototype._lint = function (files, options) {
    var errors = [];

    files.forEach(function (file) {
        var content = fs.readFileSync(file, {encoding: 'utf8'});
        var success = this._jshint(content, options, options.globals);
        if (!success) {
            this._jshint.errors.forEach(function (error) {
                if (error) {
                    // See http://jshint.com/docs/reporters/ for error format.
                    errors.push({
                        file: file,
                        error: error
                    });
                }
            });
        }
    }, this);

    if (errors.length) {
        this._reporter.reporter(errors, {verbose: this._verboseMode});
        return false;
    }

    return true;
};

module.exports = Linter;
