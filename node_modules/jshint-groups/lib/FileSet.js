'use strict';

var fs = require('fs');
var glob = require('glob');
var minimatch = require('minimatch');
var _ = require('underscore');

var MINIMATCH_OPTIONS = {
    nonegate: true,
    dot: true
};

/**
 * @param {string[]} [includes] List of glob patterns.
 * @param {string[]} [excludes] List of glob patterns to filter include files.
 */
function FileSet(includes, excludes) {
    this._includes = includes;
    this._excludes = excludes;
}

/**
 * Finds files using include and exclude patterns.
 *
 * @returns {string[]}
 */
FileSet.prototype.findFiles = function () {
    var files = [];

    if (!this._includes) {
        return files;
    }

    this._includes.forEach(function (pattern) {
        var matches = glob.sync(pattern, MINIMATCH_OPTIONS).filter(function (file) {
            return fs.statSync(file).isFile();
        });
        files = _.union(files, matches);
    });

    if (files.length && this._excludes) {
        files = files.filter(function (file) {
            return !match(file, this._excludes);
        }, this);
    }

    return files;
};

/**
 * Matches given files with includes and excludes.
 *
 * @param {string[]} files
 * @returns {string[]} Matched files.
 */
FileSet.prototype.matchFiles = function (files) {
    if (!this._includes) {
        return [];
    }

    return files.filter(function (file) {
        if (this._excludes && match(file, this._excludes)) {
            return false;
        }

        if (!fs.existsSync(file)) {
            return false;
        }

        var stats = fs.statSync(file);
        if (stats.isFile()) {
            return match(file, this._includes);
        }
    }, this);
};

/**
 * Tests whether filename matches any pattern.
 *
 * @param {string} filename
 * @param {string[]} patterns
 * @returns {boolean}
 */
function match(filename, patterns) {
    return patterns.some(function (pattern) {
        return minimatch(filename, pattern, MINIMATCH_OPTIONS);
    });
}

module.exports = FileSet;
